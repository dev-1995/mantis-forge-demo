{"version":3,"file":"mantis-forge.es.js","sources":["../src/config/index.ts","../src/auth/index.ts","../src/logger/index.ts","../src/database/index.ts","../src/errorHandler/index.ts","../src/router/index.ts","../src/pluginManager/index.ts","../src/app.ts"],"sourcesContent":["import dotenv from 'dotenv';\nimport { FrameworkConfig } from '../types';\n\ndotenv.config();\n\nconst config: FrameworkConfig = {\n    port: process.env.PORT || 3000,\n    jwtSecret: process.env.JWT_SECRET || 'your-secret-key',\n    database: {\n        host: process.env.DB_HOST || 'localhost',\n        port: parseInt(process.env.DB_PORT || '5432'),\n        user: process.env.DB_USER || 'postgres',\n        password: process.env.DB_PASSWORD || 'password',\n        database: process.env.DB_NAME || 'myapp',\n    },\n};\n\nexport default config;\n","import { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\nimport config from '../config';\n\nexport const generateToken = (payload: object): string => {\n    return jwt.sign(payload, config.jwtSecret, { expiresIn: '1h' });\n};\n\nexport const verifyToken = (req: Request, res: Response, next: NextFunction) => {\n    const token = req.headers.authorization?.split(' ')[1];\n\n    if (!token) {\n        return res.status(401).json({ message: 'No token provided' });\n    }\n\n    try {\n        const decoded = jwt.verify(token, config.jwtSecret);\n        (req as any).user = decoded;\n        next();\n    } catch (error) {\n        return res.status(401).json({ message: 'Invalid token' });\n    }\n};\n","import winston from 'winston';\n\nconst logger = winston.createLogger({\n    level: 'info',\n    format: winston.format.json(),\n    transports: [\n        new winston.transports.Console(),\n        new winston.transports.File({ filename: 'error.log', level: 'error' }),\n        new winston.transports.File({ filename: 'combined.log' }),\n    ],\n});\n\nexport default logger;\n","import PG from 'pg';\nimport config from '../config';\n\nconst pool = new PG.Pool(config.database);\n\nexport default pool;\n","import { Request, Response, NextFunction } from 'express';\nimport logger from '../logger';\n\nexport const errorHandler = (err: Error, _req: Request, res: Response, _next: NextFunction) => {\n    logger.error(`${err.name}: ${err.message}`);\n    res.status(500).json({ error: 'Internal Server Error' });\n};\n","import { Router, Request, Response, NextFunction, Express } from 'express';\nimport { Plugin } from '../types';\n\nclass PluginRouter {\n    private router: Router;\n    private prefixes: Set<string>;\n\n    constructor() {\n        this.router = Router();\n        this.prefixes = new Set();\n    }\n\n    registerPlugin(plugin: Plugin) {\n        if (this.prefixes.has(plugin.prefix)) {\n            throw new Error(`Plugin prefix \"${plugin.prefix}\" is already in use`);\n        }\n\n        this.prefixes.add(plugin.prefix);\n        this.router.use(plugin.prefix, (req: Request, _res: Response, next: NextFunction) => {\n            plugin.register(req.app as Express, req.app.locals.config, req.app.locals.env);\n            next();\n        });\n    }\n\n    getRouter() {\n        return this.router;\n    }\n}\n\nexport default PluginRouter;\n","import { Router } from 'express';\nimport { Plugin, FrameworkConfig, FrameworkEnv } from '../types';\nimport PluginRouter from '../router';\n\nclass PluginManager {\n    private plugins: Plugin[];\n    private router: PluginRouter;\n\n    constructor() {\n        this.plugins = [];\n        this.router = new PluginRouter();\n    }\n\n    registerPlugin(plugin: Plugin) {\n        this.plugins.push(plugin);\n        this.router.registerPlugin(plugin);\n    }\n\n    initializePlugins(mantisRouter: Router, config: FrameworkConfig, env: FrameworkEnv) {\n        this.plugins.forEach((plugin) => {\n            plugin.register(mantisRouter, config, env);\n        });\n        mantisRouter.use(this.router.getRouter());\n    }\n\n    getRouter() {\n        return this.router.getRouter();\n    }\n}\n\nexport default PluginManager;\n","import express, { Router } from 'express';\nimport { FrameworkOptions, FrameworkEnv } from './types';\nimport config from './config';\nimport logger from './logger';\nimport db from './database';\nimport { errorHandler } from './errorHandler';\nimport PluginManager from './pluginManager';\n\nclass MantisForge {\n    private pluginManager: PluginManager;\n\n    constructor(private app: express.Express, private mantisRouter: Router, options: FrameworkOptions) {\n        this.pluginManager = new PluginManager();\n\n        this.app.locals.config = { ...config, ...options.config };\n        this.app.locals.env = {\n            db,\n            logger,\n        } as FrameworkEnv;\n\n        this.setupMiddleware();\n    }\n\n    private setupMiddleware() {\n        this.app.use('/mantis', this.mantisRouter);\n        this.app.use(errorHandler);\n    }\n\n    public registerPlugin(plugin: any) {\n        this.pluginManager.registerPlugin(plugin);\n    }\n\n    public initialize() {\n        this.pluginManager.initializePlugins(this.mantisRouter, this.app.locals.config, this.app.locals.env);\n        logger.info('Mantis framework initialized');\n    }\n}\n\nexport default MantisForge;\n"],"names":["dotenv","config","generateToken","payload","jwt","verifyToken","req","res","next","token","decoded","logger","winston","pool","PG","errorHandler","err","_req","_next","PluginRouter","Router","plugin","_res","PluginManager","mantisRouter","env","MantisForge","app","options","db"],"mappings":"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"}