{"version":3,"file":"mantis-forge.cjs.js","sources":["../src/config/index.ts","../src/auth/index.ts","../src/logger/index.ts","../src/database/index.ts","../src/errorHandler/index.ts","../src/router/index.ts","../src/pluginManager/index.ts","../src/app.ts"],"sourcesContent":["import dotenv from 'dotenv';\nimport { FrameworkConfig } from '../types';\n\ndotenv.config();\n\nconst config: FrameworkConfig = {\n    port: process.env.PORT || 3000,\n    jwtSecret: process.env.JWT_SECRET || 'your-secret-key',\n    database: {\n        host: process.env.DB_HOST || 'localhost',\n        port: parseInt(process.env.DB_PORT || '5432'),\n        user: process.env.DB_USER || 'postgres',\n        password: process.env.DB_PASSWORD || 'password',\n        database: process.env.DB_NAME || 'myapp',\n    },\n};\n\nexport default config;\n","import { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\nimport config from '../config';\n\nexport const generateToken = (payload: object): string => {\n    return jwt.sign(payload, config.jwtSecret, { expiresIn: '1h' });\n};\n\nexport const verifyToken = (req: Request, res: Response, next: NextFunction) => {\n    const token = req.headers.authorization?.split(' ')[1];\n\n    if (!token) {\n        return res.status(401).json({ message: 'No token provided' });\n    }\n\n    try {\n        const decoded = jwt.verify(token, config.jwtSecret);\n        (req as any).user = decoded;\n        next();\n    } catch (error) {\n        return res.status(401).json({ message: 'Invalid token' });\n    }\n};\n","import winston from 'winston';\n\nconst logger = winston.createLogger({\n    level: 'info',\n    format: winston.format.json(),\n    transports: [\n        new winston.transports.Console(),\n        new winston.transports.File({ filename: 'error.log', level: 'error' }),\n        new winston.transports.File({ filename: 'combined.log' }),\n    ],\n});\n\nexport default logger;\n","import PG from 'pg';\nimport config from '../config';\n\nconst pool = new PG.Pool(config.database);\n\nexport default pool;\n","import { Request, Response, NextFunction } from 'express';\nimport logger from '../logger';\n\nexport const errorHandler = (err: Error, _req: Request, res: Response, _next: NextFunction) => {\n    logger.error(`${err.name}: ${err.message}`);\n    res.status(500).json({ error: 'Internal Server Error' });\n};\n","import { Router, Request, Response, NextFunction, Express } from 'express';\nimport { Plugin } from '../types';\n\nclass PluginRouter {\n    private router: Router;\n    private prefixes: Set<string>;\n\n    constructor() {\n        this.router = Router();\n        this.prefixes = new Set();\n    }\n\n    registerPlugin(plugin: Plugin) {\n        if (this.prefixes.has(plugin.prefix)) {\n            throw new Error(`Plugin prefix \"${plugin.prefix}\" is already in use`);\n        }\n\n        this.prefixes.add(plugin.prefix);\n        this.router.use(plugin.prefix, (req: Request, _res: Response, next: NextFunction) => {\n            plugin.register(req.app as Express, req.app.locals.config, req.app.locals.env);\n            next();\n        });\n    }\n\n    getRouter() {\n        return this.router;\n    }\n}\n\nexport default PluginRouter;\n","import { Router } from 'express';\nimport { Plugin, FrameworkConfig, FrameworkEnv } from '../types';\nimport PluginRouter from '../router';\n\nclass PluginManager {\n    private plugins: Plugin[];\n    private router: PluginRouter;\n\n    constructor() {\n        this.plugins = [];\n        this.router = new PluginRouter();\n    }\n\n    registerPlugin(plugin: Plugin) {\n        this.plugins.push(plugin);\n        this.router.registerPlugin(plugin);\n    }\n\n    initializePlugins(mantisRouter: Router, config: FrameworkConfig, env: FrameworkEnv) {\n        this.plugins.forEach((plugin) => {\n            plugin.register(mantisRouter, config, env);\n        });\n        mantisRouter.use(this.router.getRouter());\n    }\n\n    getRouter() {\n        return this.router.getRouter();\n    }\n}\n\nexport default PluginManager;\n","import express, { Router } from 'express';\nimport { FrameworkOptions, FrameworkEnv } from './types';\nimport config from './config';\nimport logger from './logger';\nimport db from './database';\nimport { errorHandler } from './errorHandler';\nimport PluginManager from './pluginManager';\n\nclass MantisForge {\n    private pluginManager: PluginManager;\n\n    constructor(private app: express.Express, private mantisRouter: Router, options: FrameworkOptions) {\n        this.pluginManager = new PluginManager();\n\n        this.app.locals.config = { ...config, ...options.config };\n        this.app.locals.env = {\n            db,\n            logger,\n        } as FrameworkEnv;\n\n        this.setupMiddleware();\n    }\n\n    private setupMiddleware() {\n        this.app.use('/mantis', this.mantisRouter);\n        this.app.use(errorHandler);\n    }\n\n    public registerPlugin(plugin: any) {\n        this.pluginManager.registerPlugin(plugin);\n    }\n\n    public initialize() {\n        this.pluginManager.initializePlugins(this.mantisRouter, this.app.locals.config, this.app.locals.env);\n        logger.info('Mantis framework initialized');\n    }\n}\n\nexport default MantisForge;\n"],"names":["dotenv","config","generateToken","payload","jwt","verifyToken","req","res","next","token","decoded","logger","winston","pool","PG","errorHandler","err","_req","_next","PluginRouter","Router","plugin","_res","PluginManager","mantisRouter","env","MantisForge","app","options","db"],"mappings":"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"}