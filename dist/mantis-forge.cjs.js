"use strict";Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const u=require("jsonwebtoken"),l=require("dotenv"),i=require("winston"),p=require("pg"),c=require("express");l.config();const n={port:process.env.PORT||3e3,jwtSecret:process.env.JWT_SECRET||"your-secret-key",database:{host:process.env.DB_HOST||"localhost",port:parseInt(process.env.DB_PORT||"5432"),user:process.env.DB_USER||"postgres",password:process.env.DB_PASSWORD||"password",database:process.env.DB_NAME||"myapp"}},g=s=>u.sign(s,n.jwtSecret,{expiresIn:"1h"}),h=(s,e,r)=>{const t=s.headers.authorization?.split(" ")[1];if(!t)return e.status(401).json({message:"No token provided"});try{const o=u.verify(t,n.jwtSecret);s.user=o,r()}catch{return e.status(401).json({message:"Invalid token"})}},a=i.createLogger({level:"info",format:i.format.json(),transports:[new i.transports.Console,new i.transports.File({filename:"error.log",level:"error"}),new i.transports.File({filename:"combined.log"})]}),f=new p.Pool(n.database),d=(s,e,r,t)=>{a.error(`${s.name}: ${s.message}`),r.status(500).json({error:"Internal Server Error"})};class v{router;prefixes;constructor(){this.router=c.Router(),this.prefixes=new Set}registerPlugin(e){if(this.prefixes.has(e.prefix))throw new Error(`Plugin prefix "${e.prefix}" is already in use`);this.prefixes.add(e.prefix),this.router.use(e.prefix,(r,t,o)=>{e.register(r.app,r.app.locals.config,r.app.locals.env),o()})}getRouter(){return this.router}}class w{plugins;router;constructor(){this.plugins=[],this.router=new v}registerPlugin(e){this.plugins.push(e),this.router.registerPlugin(e)}initializePlugins(e,r,t){this.plugins.forEach(o=>{o.register(e,r,t)}),e.use(this.router.getRouter())}getRouter(){return this.router.getRouter()}}class P{constructor(e,r,t){this.app=e,this.mantisRouter=r,this.pluginManager=new w,this.app.locals.config={...n,...t.config},this.app.locals.env={db:f,logger:a},this.setupMiddleware()}pluginManager;setupMiddleware(){this.app.use("/mantis",this.mantisRouter),this.app.use(d)}registerPlugin(e){this.pluginManager.registerPlugin(e)}initialize(){this.pluginManager.initializePlugins(this.mantisRouter,this.app.locals.config,this.app.locals.env),a.info("Mantis framework initialized")}}exports.default=P;exports.generateToken=g;exports.verifyToken=h;
//# sourceMappingURL=mantis-forge.cjs.js.map
